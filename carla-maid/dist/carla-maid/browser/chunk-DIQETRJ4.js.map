{
  "version": 3,
  "sources": ["src/app/blogs-open/blogs-open.component.ts", "src/app/blogs-open/blogs-open.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { CommonModule } from '@angular/common';\nimport { WordPressService } from '../shared/services/word-press.service';\nimport { SharedService } from '../shared/services/shared.service';\n@Component({\n  selector: 'app-blogs-open',\n  standalone: true,\n  imports: [\n    TranslateModule,\n    CommonModule,\n  ],\n  templateUrl: './blogs-open.component.html',\n  styleUrl: './blogs-open.component.sass'\n})\nexport class BlogsOpenComponent {\n  lang: string;\n  posts!: any[];\n  blogsPosts!: any[];\n\n  constructor(\n    private translateService: TranslateService,\n    private _wordPressService: WordPressService,\n    protected _sharedService: SharedService\n  ) {\n\n    this.lang = this.translateService.currentLang || 'en';\n    this.translateService.onLangChange.subscribe(() => {\n      this.lang = this.translateService.currentLang || 'en';\n    });\n\n    this.getPosts();\n  }\n\n  /**\n   * Retrieves posts filtered by multiple category names.\n   */\n  getPosts(): void {\n    const postsPage = 'blogs';\n    const categoriesNames = [postsPage, this.lang];\n\n    const params = {\n      per_page: 100,\n      page: 1\n    };\n\n    this._wordPressService.getPostsByCategoriesNames(postsPage, categoriesNames, params).subscribe({\n      next: (value: any) => {\n        this.posts = value;\n      }\n    });\n  }\n  getFirstImage(html: string): string | null {\n    const doc = new DOMParser().parseFromString(html, \"text/html\");\n    const img = doc.querySelector(\"img\");\n    return img ? img.src : \"../../assets/images/posts/default.png\";\n  }\n  getBlogsPosts(): void {\n    const postsPage = 'blogs';\n    const categoriesNames = [postsPage, this.lang];\n\n    const params = {\n      per_page: 20,\n      page: 1\n    };\n\n    this._wordPressService.getPostsByCategoriesNames(postsPage, categoriesNames, params).subscribe({\n      next: (value: any) => {\n        this.blogsPosts = value;\n      }\n    });\n  }\n}\n", "<section class=\"section-1 center flex-column\">\n  <h1 class=\"text-align-center hero-title\">{{\"shared.BestCleaningCompanyInQatar\" | translate}}:<br>\n    {{\"shared.FindReliableProfessionalCleaningServices\" | translate}}</h1>\n</section>\n\n<!-- section 2 -->\n\n<section class=\"section-2 flex-column page-container\" [ngClass]=\"{'arabic-text': lang === 'ar'}\">\n\n  <p class=\"gray-text-color\">{{\"paragraph.KeepingACleanAndOrganizedSpace\" | translate}}</p>\n\n  @if (posts.length > 0) {\n    @for (post of posts; track $index) {\n      <div class=\"post\">\n        <h1 class=\"primary-text-color\" [innerHTML]=\"($index+ 1) + '. ' + post.title.rendered\"></h1>\n        <p class=\" gray-text-color post-content\" [innerHTML]=\"_sharedService.sanitizeHtml(post.content.rendered)\"></p>\n      </div>\n    }\n  } @else {\n      <h1 class=\"primary-text-color center title-size\">{{\"blogs.noPosts\" | translate}}</h1>\n  }\n\n</section>"],
  "mappings": "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",
  "names": []
}
