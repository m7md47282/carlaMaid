{
  "version": 3,
  "sources": ["src/app/shared/services/shared.service.ts", "src/environments/environment.prod.ts", "src/app/shared/services/word-press.service.ts"],
  "sourcesContent": ["import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\ninterface Params {\r\n  [key: string]: string | number | boolean | (string | number | boolean)[];\r\n}\r\n\r\ninterface Options {\r\n  allowNull?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SharedService {\r\n  private selectedPostSubject = new BehaviorSubject<any>(null);\r\n  selectedPost$ = this.selectedPostSubject.asObservable();\r\n\r\n  constructor(\r\n    private _sanitizer: DomSanitizer,\r\n  ) { }\r\n\r\n  /**\r\n   * Prepares the query parameters for HTTP requests.\r\n   * @param {Object} params - The parameters to be processed.\r\n   * @param {Options} [options] - Optional settings for null values.\r\n   * @returns {HttpParams} The processed HTTP parameters.\r\n   */\r\n  prepareParams({ params, options }: { params: Params; options?: Options }): HttpParams {\r\n    let httpParams = new HttpParams();\r\n\r\n    if (params) {\r\n      if (!options?.allowNull) {\r\n        params = Object.fromEntries(\r\n          Object.entries(params).filter(([_, value]) => value !== null && value !== undefined && value !== '')\r\n        );\r\n      }\r\n\r\n      for (const [key, value] of Object.entries(params)) {\r\n        if (Array.isArray(value)) {\r\n          value.forEach((val, index) => {\r\n            httpParams = httpParams.append(`${key}[${index}]`, String(val));\r\n          });\r\n        } else {\r\n          httpParams = httpParams.set(key, String(value));\r\n        }\r\n      }\r\n    }\r\n\r\n    return httpParams;\r\n  }\r\n\r\n  /**\r\n   * Sanitizes HTML content for safe usage in the application.\r\n   * @param {string} content - The HTML content to sanitize.\r\n   * @returns {SafeHtml} The sanitized HTML content.\r\n   */\r\n  sanitizeHtml(content: string): SafeHtml {\r\n    return this._sanitizer.bypassSecurityTrustHtml(content);\r\n  }\r\n\r\n  /**\r\n   * Removes all HTML tags and decodes HTML entities from a given string.\r\n   *\r\n   * @param {string} html - The input HTML string containing HTML content.\r\n   * @returns {string} The plain text content without HTML tags and with decoded entities.\r\n   */\r\n  stripHtml(html: string): string {\r\n    const text = html.replace(/<[^>]*>/g, '');\r\n\r\n    const textarea = document.createElement(\"textarea\");\r\n    textarea.innerHTML = text;\r\n    return textarea.value;\r\n  }\r\n  selectPost(post: any) {\r\n    this.selectedPostSubject.next(post);\r\n  }\r\n\r\n}", "export const environment = {\r\n    production: true, // Indicates if the environment is production\r\n    // apiUrl: '',\r\n    wordpressApiBaseUrl: 'https://carlamaid.qa/wordpress/index.php/wp-json/wp/v2', \r\n    lang: 'en', // Default language setting\r\n    languages: ['ar', 'en'], // Supported languages\r\n    direction: 'ltr', // Text direction, left-to-right\r\n  \r\n  };", "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../../../environments/environment.prod';\r\nimport { Observable, switchMap, map, forkJoin, of } from 'rxjs';\r\nimport { SharedService } from './shared.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class WordPressService {\r\n  private wordpressApiBaseUrl = environment.wordpressApiBaseUrl;\r\n\r\n  constructor(private _http: HttpClient, private _sharedService: SharedService) { }\r\n\r\n  /**\r\n   * Fetches posts from the WordPress API with the provided parameters.\r\n   * \r\n   * @param params - The query parameters to be sent with the HTTP request. This can include filters like\r\n   *                 `orderby`, `order`, `per_page`, and others.\r\n   * \r\n   * @returns An observable containing the response data from the API, which is an array of posts.\r\n   */\r\n  getPosts(params: any) {\r\n    return this._http.get(`${this.wordpressApiBaseUrl}/posts`, { params: params });\r\n  }\r\n\r\n  /**\r\n   * Fetches all categories from the WordPress API.\r\n   * \r\n   * @returns An observable containing the response data from the API, which is an array of categories.\r\n   */\r\n  getCategories() {\r\n    return this._http.get<any[]>(`${this.wordpressApiBaseUrl}/categories`);\r\n  }\r\n\r\n  /**\r\n   * Fetches posts from specific categories, identified by their names, with the provided parameters.\r\n   * \r\n   * @param categoryNames - An array of category names for which to fetch posts.\r\n   * @param postsParams - Additional query parameters for fetching posts (e.g., `orderby`, `order`, `per_page`).\r\n   * \r\n   * @returns An observable containing an array of posts belonging to the specified categories.\r\n   * \r\n   * @throws {Error} If none of the categories are found, an error will be thrown.\r\n   */\r\n  getPostsByCategoriesNames(postsPage: string, categoryNames: string[], postsParams: any): Observable<any[]> {\r\n    return this.getCategories().pipe(\r\n      switchMap(categories => {\r\n        const categoryIds = categories\r\n          .filter(cat => categoryNames.some(name => cat.name.toLowerCase() === name.toLowerCase()))\r\n          .map(cat => cat.id);\r\n\r\n          const postsPageCategoryId = categories.find(cat => cat.name.toLowerCase() === postsPage.toLowerCase())?.id;\r\n        \r\n        if (categoryIds.length !== categoryNames.length) {\r\n          return of([]);\r\n        }\r\n        const preparedParams = this._sharedService.prepareParams({ \r\n          params: { ...postsParams, ...{ categories: postsPageCategoryId } } \r\n        });\r\n        \r\n        return this.getPosts(preparedParams).pipe(\r\n          map(posts => \r\n            (posts as any[]).filter(post =>\r\n              categoryIds.every(catId => post.categories.includes(catId))\r\n            )\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n  \r\n\r\n}"],
  "mappings": "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",
  "names": []
}
