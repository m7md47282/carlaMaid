{
  "version": 3,
  "sources": ["src/environments/environment.ts", "src/app/shared/config/config.service.ts"],
  "sourcesContent": ["export const environment = {\n    production: false, // Indicates if the environment is production\n    // apiUrl: '',\n    wordpressApiBaseUrl: 'https://carlamaid.qa/wordpress/index.php/wp-json/wp/v2', \n    lang: 'en', // Default language setting\n    languages: ['ar', 'en'], // Supported languages\n    direction: 'ltr', // Text direction, left-to-right\n  \n  };", "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Direction, Languages } from '../interfaces/languages';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  constructor(private translate: TranslateService, @Inject(PLATFORM_ID) private platformId: Object) { }\n\n  /**\n   * Determines the current language setting from local storage or falls back to the default language.\n   * @returns {Languages} lang The current language code ex. 'ar' | 'en'.\n   */\n  getLang(): Languages{\n    if(this.isBrowser())\n      return (localStorage?.getItem('lang') || environment.lang) as Languages\n\n    return (environment.lang || 'en') as Languages\n  }\n\n  /**\n   * Sets the language in local storage, updates the document's language attribute, and updates the translation service.\n   * Also sets the text direction ('ltr' or 'rtl') based on the language.\n   * @param {string} lang - The language code to set.\n   */\n  setLang(lang: Languages){\n    if(this.isBrowser()){\n      localStorage.setItem('lang', lang);\n      document.documentElement.lang = lang;\n      environment.lang = lang;\n      this.translate.use(environment.lang);\n      \n      environment.direction = lang == 'ar' ? 'rtl' : 'ltr';\n      document.documentElement.dir = environment.direction;\n      localStorage.setItem('direction', environment.direction);\n    }\n  }\n\n  toggleLang(){\n    this.setLang(this.getLang() === 'ar'? 'en' : 'ar'); \n    location.reload();\n  }\n\n  /**\n   * Retrieves the text direction from local storage or falls back to the default direction.\n   * @returns {Direction} The current text direction ('ltr' or 'rtl').\n   */\n  getDirection(): Direction{\n    if(this.isBrowser())\n      return (localStorage?.getItem('direction') || environment.direction) as Direction\n    return (environment.direction || 'ltr') as Direction\n  }\n\n\n  /**\n   * Checks if the current platform is a browser.\n   * @returns {boolean} True if the platform is a browser, false otherwise.\n   */\n  isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId)\n  }\n  \n  /**\n   * Checks if the current platform is a server.\n   * @returns {boolean} True if the platform is a server, false otherwise.\n   */\n  isServer(): boolean {\n    return isPlatformServer(this.platformId)\n  }\n  \n}"],
  "mappings": ";;;;;;;;;;;;;AAAO,IAAM,cAAc;EACvB,YAAY;;;EAEZ,qBAAqB;EACrB,MAAM;;EACN,WAAW,CAAC,MAAM,IAAI;;EACtB,WAAW;;;;;ACGT,IAAO,iBAAP,MAAO,eAAa;EAExB,YAAoB,WAA0D,YAAkB;AAA5E;AAA0D;AAA1D,SAAA,YAAA;AAA0D,SAAA,aAAA;EAAsB;;;;;EAMpG,UAAO;AACL,QAAG,KAAK,UAAS;AACf,aAAQ,cAAc,QAAQ,MAAM,KAAK,YAAY;AAEvD,WAAQ,YAAY,QAAQ;EAC9B;;;;;;EAOA,QAAQ,MAAe;AACrB,QAAG,KAAK,UAAS,GAAG;AAClB,mBAAa,QAAQ,QAAQ,IAAI;AACjC,eAAS,gBAAgB,OAAO;AAChC,kBAAY,OAAO;AACnB,WAAK,UAAU,IAAI,YAAY,IAAI;AAEnC,kBAAY,YAAY,QAAQ,OAAO,QAAQ;AAC/C,eAAS,gBAAgB,MAAM,YAAY;AAC3C,mBAAa,QAAQ,aAAa,YAAY,SAAS;IACzD;EACF;EAEA,aAAU;AACR,SAAK,QAAQ,KAAK,QAAO,MAAO,OAAM,OAAO,IAAI;AACjD,aAAS,OAAM;EACjB;;;;;EAMA,eAAY;AACV,QAAG,KAAK,UAAS;AACf,aAAQ,cAAc,QAAQ,WAAW,KAAK,YAAY;AAC5D,WAAQ,YAAY,aAAa;EACnC;;;;;EAOA,YAAS;AACP,WAAO,kBAAkB,KAAK,UAAU;EAC1C;;;;;EAMA,WAAQ;AACN,WAAO,iBAAiB,KAAK,UAAU;EACzC;;cA/DW;mCAAA,gBAAa,mBAAA,gBAAA,GAAA,mBAEiC,WAAW,CAAA;AAAA;cAFzD,oFAAA,gBAAa,SAAb,eAAa,WAAA,YAFZ,OAAM,CAAA;AAEd,IAAO,gBAAP;",
  "names": []
}
