{
  "version": 3,
  "sources": ["src/app/blogs-open/blogs-open.component.ts", "src/app/blogs-open/blogs-open.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WordPressService } from '../shared/services/word-press.service';\r\nimport { SharedService } from '../shared/services/shared.service';\r\n@Component({\r\n  selector: 'app-blogs-open',\r\n  standalone: true,\r\n  imports: [\r\n    TranslateModule,\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './blogs-open.component.html',\r\n  styleUrl: './blogs-open.component.sass'\r\n})\r\nexport class BlogsOpenComponent {\r\n  lang: string;\r\n  posts!: any[];\r\n  blogsPosts!: any[];\r\n\r\n  constructor(\r\n    private translateService: TranslateService,\r\n    private _wordPressService: WordPressService,\r\n    protected _sharedService: SharedService\r\n  ) {\r\n\r\n    this.lang = this.translateService.currentLang || 'en';\r\n    this.translateService.onLangChange.subscribe(() => {\r\n      this.lang = this.translateService.currentLang || 'en';\r\n    });\r\n\r\n    this.getPosts();\r\n  }\r\n\r\n  /**\r\n   * Retrieves posts filtered by multiple category names.\r\n   */\r\n  getPosts(): void {\r\n    const postsPage = 'blogs';\r\n    const categoriesNames = [postsPage, this.lang];\r\n\r\n    const params = {\r\n      per_page: 100,\r\n      page: 1\r\n    };\r\n\r\n    this._wordPressService.getPostsByCategoriesNames(postsPage, categoriesNames, params).subscribe({\r\n      next: (value: any) => {\r\n        this.posts = value;\r\n      }\r\n    });\r\n  }\r\n  getFirstImage(html: string): string | null {\r\n    const doc = new DOMParser().parseFromString(html, \"text/html\");\r\n    const img = doc.querySelector(\"img\");\r\n    return img ? img.src : \"../../assets/images/posts/default.png\";\r\n  }\r\n  getBlogsPosts(): void {\r\n    const postsPage = 'blogs';\r\n    const categoriesNames = [postsPage, this.lang];\r\n\r\n    const params = {\r\n      per_page: 20,\r\n      page: 1\r\n    };\r\n\r\n    this._wordPressService.getPostsByCategoriesNames(postsPage, categoriesNames, params).subscribe({\r\n      next: (value: any) => {\r\n        this.blogsPosts = value;\r\n      }\r\n    });\r\n  }\r\n}\r\n", "<section class=\"section-1 center flex-column\">\r\n  <h1 class=\"text-align-center hero-title\">{{\"shared.BestCleaningCompanyInQatar\" | translate}}:<br>\r\n    {{\"shared.FindReliableProfessionalCleaningServices\" | translate}}</h1>\r\n</section>\r\n\r\n<!-- section 2 -->\r\n\r\n<section class=\"section-2 flex-column page-container\" [ngClass]=\"{'arabic-text': lang === 'ar'}\">\r\n\r\n  <p class=\"gray-text-color\">{{\"paragraph.KeepingACleanAndOrganizedSpace\" | translate}}</p>\r\n\r\n  @if (posts.length > 0) {\r\n    @for (post of posts; track $index) {\r\n      <div class=\"post\">\r\n        <h1 class=\"primary-text-color\" [innerHTML]=\"($index+ 1) + '. ' + post.title.rendered\"></h1>\r\n        <p class=\" gray-text-color post-content\" [innerHTML]=\"_sharedService.sanitizeHtml(post.content.rendered)\"></p>\r\n      </div>\r\n    }\r\n  } @else {\r\n      <h1 class=\"primary-text-color center title-size\">{{\"blogs.noPosts\" | translate}}</h1>\r\n  }\r\n\r\n</section>"],
  "mappings": "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",
  "names": []
}
