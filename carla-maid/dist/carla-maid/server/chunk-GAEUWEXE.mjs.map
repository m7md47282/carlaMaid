{
  "version": 3,
  "sources": ["src/environments/environment.ts", "src/app/shared/config/config.service.ts"],
  "sourcesContent": ["export const environment = {\r\n    production: false, // Indicates if the environment is production\r\n    // apiUrl: '',\r\n    wordpressApiBaseUrl: 'https://carlamaid.qa/wordpress/index.php/wp-json/wp/v2', \r\n    lang: 'en', // Default language setting\r\n    languages: ['ar', 'en'], // Supported languages\r\n    direction: 'ltr', // Text direction, left-to-right\r\n  \r\n  };", "import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport { Direction, Languages } from '../interfaces/languages';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigService {\r\n\r\n  constructor(private translate: TranslateService, @Inject(PLATFORM_ID) private platformId: Object) { }\r\n\r\n  /**\r\n   * Determines the current language setting from local storage or falls back to the default language.\r\n   * @returns {Languages} lang The current language code ex. 'ar' | 'en'.\r\n   */\r\n  getLang(): Languages{\r\n    if(this.isBrowser())\r\n      return (localStorage?.getItem('lang') || environment.lang) as Languages\r\n\r\n    return (environment.lang || 'en') as Languages\r\n  }\r\n\r\n  /**\r\n   * Sets the language in local storage, updates the document's language attribute, and updates the translation service.\r\n   * Also sets the text direction ('ltr' or 'rtl') based on the language.\r\n   * @param {string} lang - The language code to set.\r\n   */\r\n  setLang(lang: Languages){\r\n    if(this.isBrowser()){\r\n      localStorage.setItem('lang', lang);\r\n      document.documentElement.lang = lang;\r\n      environment.lang = lang;\r\n      this.translate.use(environment.lang);\r\n      \r\n      environment.direction = lang == 'ar' ? 'rtl' : 'ltr';\r\n      document.documentElement.dir = environment.direction;\r\n      localStorage.setItem('direction', environment.direction);\r\n    }\r\n  }\r\n\r\n  toggleLang(){\r\n    this.setLang(this.getLang() === 'ar'? 'en' : 'ar'); \r\n    location.reload();\r\n  }\r\n\r\n  /**\r\n   * Retrieves the text direction from local storage or falls back to the default direction.\r\n   * @returns {Direction} The current text direction ('ltr' or 'rtl').\r\n   */\r\n  getDirection(): Direction{\r\n    if(this.isBrowser())\r\n      return (localStorage?.getItem('direction') || environment.direction) as Direction\r\n    return (environment.direction || 'ltr') as Direction\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks if the current platform is a browser.\r\n   * @returns {boolean} True if the platform is a browser, false otherwise.\r\n   */\r\n  isBrowser(): boolean {\r\n    return isPlatformBrowser(this.platformId)\r\n  }\r\n  \r\n  /**\r\n   * Checks if the current platform is a server.\r\n   * @returns {boolean} True if the platform is a server, false otherwise.\r\n   */\r\n  isServer(): boolean {\r\n    return isPlatformServer(this.platformId)\r\n  }\r\n  \r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;AAAO,IAAM,cAAc;EACvB,YAAY;;;EAEZ,qBAAqB;EACrB,MAAM;;EACN,WAAW,CAAC,MAAM,IAAI;;EACtB,WAAW;;;;;ACGT,IAAO,iBAAP,MAAO,eAAa;EAExB,YAAoB,WAA0D,YAAkB;AAA5E;AAA0D;AAA1D,SAAA,YAAA;AAA0D,SAAA,aAAA;EAAsB;;;;;EAMpG,UAAO;AACL,QAAG,KAAK,UAAS;AACf,aAAQ,cAAc,QAAQ,MAAM,KAAK,YAAY;AAEvD,WAAQ,YAAY,QAAQ;EAC9B;;;;;;EAOA,QAAQ,MAAe;AACrB,QAAG,KAAK,UAAS,GAAG;AAClB,mBAAa,QAAQ,QAAQ,IAAI;AACjC,eAAS,gBAAgB,OAAO;AAChC,kBAAY,OAAO;AACnB,WAAK,UAAU,IAAI,YAAY,IAAI;AAEnC,kBAAY,YAAY,QAAQ,OAAO,QAAQ;AAC/C,eAAS,gBAAgB,MAAM,YAAY;AAC3C,mBAAa,QAAQ,aAAa,YAAY,SAAS;IACzD;EACF;EAEA,aAAU;AACR,SAAK,QAAQ,KAAK,QAAO,MAAO,OAAM,OAAO,IAAI;AACjD,aAAS,OAAM;EACjB;;;;;EAMA,eAAY;AACV,QAAG,KAAK,UAAS;AACf,aAAQ,cAAc,QAAQ,WAAW,KAAK,YAAY;AAC5D,WAAQ,YAAY,aAAa;EACnC;;;;;EAOA,YAAS;AACP,WAAO,kBAAkB,KAAK,UAAU;EAC1C;;;;;EAMA,WAAQ;AACN,WAAO,iBAAiB,KAAK,UAAU;EACzC;;cA/DW;mCAAA,gBAAa,mBAAA,gBAAA,GAAA,mBAEiC,WAAW,CAAA;AAAA;cAFzD,oFAAA,gBAAa,SAAb,eAAa,WAAA,YAFZ,OAAM,CAAA;AAEd,IAAO,gBAAP;",
  "names": []
}
